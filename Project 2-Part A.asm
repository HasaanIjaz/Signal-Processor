ORG 0

ACALL CONFIGURE_LCD
Read BIT P2.5
Write BIT P2.6
INTR BIT P2.7
MYDATA EQU P1
MOV P1,#0FFh
SETB INTR
BACK:
mov a,#01H; CLEAR DISPLAY SCREEN
ACALL SEND_COMMAND
mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
acall SEND_COMMAND
CLR Write
NOP ;for 100 ns delay
SETB Write ; low to high pulse
HERE: JB INTR,HERE ; wait for end of conversion
CLR Read ; make data appear at ADC pins
NOP
NOP ; for 200 ns delay
MOV A,MYDATA ; read converted data
;MOV B,#100
;DIV AB
;ADD A, #30H
;ACALL SEND_DATA
;MOV A,B
;MOV B,#10
;DIV AB
;ADD A,#30H
;ACALL SEND_DATA
;MOV A,B 
;ADD A, #30H
;ACALL SEND_DATA
ACALL DELAY2 ; CREATES 123ms delay. If the input wave is 1HZ, then we are sampling approx. 8 points of wave.



MOV B, #32
DIV AB ; AFTER OPERATION A = QUOTIENT, B = REMAINDER

CJNE A,#0, ACCNOT0
MOV DPTR, #voltable0
MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE
MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 4 DIGITS WHICH OCCUPY 4 ADDRESSES
MOV R3,B ; COUNT 
MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER
H0: 
MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 
MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY
ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD
MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0
INC A 
DJNZ R3, H0 ; REPEAT 4 TIMES BCZ 4 DIGITS FOR FIRST 100 NUMBERS 
LJMP END1
ACCNOT0: CJNE A, #1, ACCNOT1
MOV DPTR, #voltable1
MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE
MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 4 DIGITS WHICH OCCUPY 4 ADDRESSES
MOV R3,B ; COUNT 
MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER
H1: 
MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 
MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY
ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD
MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0
INC A
DJNZ R3, H1 ; REPEAT 4 TIMES BCZ 4 DIGITS FOR FIRST 100 NUMBERS 
LJMP END1
ACCNOT1: CJNE A, #2, ACCNOT2
MOV DPTR, #voltable2
MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE
MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 5 DIGITS WHICH OCCUPY 5 ADDRESSES
MOV R3,B ; COUNT 
MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER
H2:  
MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 
MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY
ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD
MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0
INC A
DJNZ R3, H2 ; REPEAT 5 TIMES BCZ 5 DIGITS FOR SECOND 100 NUMBERS 
LJMP END1 
ACCNOT2: CJNE A, #3, ACCNOT3
MOV DPTR, #voltable3
MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE
MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 5 DIGITS WHICH OCCUPY 5 ADDRESSES
MOV R3,B ; COUNT 
MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER
H3: 
MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 
MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY
ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD
MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0
INC A
DJNZ R3, H3 ; REPEAT 5 TIMES BCZ 5 DIGITS FOR SECOND 100 NUMBERS 
ACCNOT3: CJNE A, #4, ACCNOT4
MOV DPTR, #voltable4
MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE
MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 4 DIGITS WHICH OCCUPY 4 ADDRESSES
MOV R3,B ; COUNT 
MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER
H4: 
MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 
MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY
ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD
MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0
INC A
DJNZ R3, H4 ; REPEAT 4 TIMES BCZ 4 DIGITS FOR FIRST 100 NUMBERS 
LJMP END1 
ACCNOT4: CJNE A, #5, ACCNOT5
MOV DPTR, #voltable5
MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE
MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 4 DIGITS WHICH OCCUPY 4 ADDRESSES
MOV R3,B ; COUNT 
MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER
H5: 
MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 
MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY
ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD
MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0
INC A
DJNZ R3, H5 ; REPEAT 4 TIMES BCZ 4 DIGITS FOR FIRST 100 NUMBERS 
LJMP END1
ACCNOT5: CJNE A, #6, ACCNOT6
MOV DPTR, #voltable6
MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE
MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 4 DIGITS WHICH OCCUPY 4 ADDRESSES
MOV R3,B ; COUNT 
MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER
H6: 
MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 
MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY
ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD
MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0
INC A
DJNZ R3, H6 ; REPEAT 4 TIMES BCZ 4 DIGITS FOR FIRST 100 NUMBERS 
LJMP END1
ACCNOT6: CJNE A, #7, ACCNOT7
MOV DPTR, #voltable7
MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE
MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 4 DIGITS WHICH OCCUPY 4 ADDRESSES
MOV R3,B ; COUNT 
MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER
H7: 
MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 
MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY
ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD
MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0
INC A
DJNZ R3, H7 ; REPEAT 4 TIMES BCZ 4 DIGITS FOR FIRST 100 NUMBERS 
LJMP END1
ACCNOT7:
END1:
LCALL DELAY3
SETB Read ; prepare for next round
LJMP BACK

DELAY2:
L2:MOV R1, #0FFH
L1:MOV R0, #0FFH
HEREZ: DJNZ R0, HEREZ
DJNZ R1, L1
RET
DELAY3:
MOV R0, #04H
DELAYSECOND: MOV R1, #0FFH
BACK2: MOV R2,#0FFH
HERE2: DJNZ R2,HERE2
DJNZ R1, BACK2
DJNZ R0,DELAYSECOND
RET


voltable0:
DB '0.00V', '0.02V', '0.04V', '0.06V', '0.08V', '0.10V', '0.12V', '0.14V', '0.16V', '0.18V', '0.20V', '0.21V', '0.23V', '0.25V', '0.27V', '0.29V', '0.31V', '0.33V', '0.35V', '0.37V', '0.39V', '0.41V', '0.43V', '0.45V', '0.47V', '0.49V', '0.51V', '0.53V', '0.55V', '0.57V', '0.59V','0.61V'

voltable1:
DB '0.62V', '0.64V', '0.66V', '0.68V', '0.70V', '0.72V', '0.74V', '0.76V', '0.78V', '0.80V', '0.82V', '0.84V', '0.86V', '0.88V', '0.90V', '0.92V', '0.94V', '0.96V', '0.98V', '1.00V', '1.02V', '1.04V', '1.05V', '1.07V', '1.09V', '1.11V', '1.13V', '1.15V', '1.17V', '1.19V', '1.21V', '1.23V'

voltable2:
DB '1.25V', '1.27V', '1.29V', '1.31V', '1.33V', '1.35V', '1.37V', '1.39V', '1.41V', '1.43V', '1.45V', '1.46V', '1.48V', '1.50V', '1.52V', '1.54V', '1.56V', '1.58V', '1.60V', '1.62V', '1.64V', '1.66V', '1.68V', '1.70V', '1.72V', '1.74V', '1.76V', '1.78V', '1.80V', '1.82V', '1.84V', '1.86V'

voltable3:
DB '1.88V', '1.89V', '1.91V', '1.93V', '1.95V', '1.97V', '1.99V', '2.01V', '2.03V', '2.05V', '2.07V', '2.09V', '2.11V', '2.13V', '2.15V', '2.17V', '2.19V', '2.21V', '2.23V', '2.25V', '2.27V', '2.29V', '2.30V', '2.32V', '2.34V', '2.36V', '2.38V', '2.40V', '2.42V', '2.44V', '2.46V', '2.48V'

voltable4:
DB '2.50V', '2.52V', '2.54V', '2.56V', '2.58V', '2.60V', '2.62V', '2.64V', '2.66V', '2.68V', '2.70V', '2.71V', '2.73V', '2.75V', '2.77V', '2.79V', '2.81V', '2.83V', '2.85V', '2.87V', '2.89V', '2.91V', '2.93V', '2.95V', '2.97V', '2.99V', '3.01V', '3.03V', '3.05V', '3.07V', '3.09V', '3.11V'

voltable5:
DB '3.12V', '3.14V', '3.16V', '3.18V', '3.20V', '3.22V', '3.24V', '3.26V', '3.28V', '3.30V', '3.32V', '3.34V', '3.36V', '3.38V', '3.40V', '3.42V', '3.44V', '3.46V', '3.48V', '3.50V', '3.52V', '3.54V', '3.55V', '3.57V', '3.59V', '3.61V', '3.63V', '3.65V', '3.67V', '3.69V', '3.71V', '3.73V'

voltable6:
DB '3.75V', '3.77V', '3.79V', '3.81V', '3.83V', '3.85V', '3.87V', '3.89V', '3.91V', '3.93V', '3.95V', '3.96V', '3.98V', '4.00V', '4.02V', '4.04V', '4.06V', '4.08V', '4.10V', '4.12V', '4.14V', '4.16V', '4.18V', '4.20V', '4.22V', '4.24V', '4.26V', '4.28V', '4.30V', '4.32V', '4.34V', '4.36V'

voltable7:
DB '4.38V', '4.39V', '4.41V', '4.43V', '4.45V', '4.47V', '4.49V', '4.51V', '4.53V', '4.55V', '4.57V', '4.59V', '4.61V', '4.63V', '4.65V', '4.67V', '4.69V', '4.71V', '4.73V', '4.75V', '4.77V', '4.79V', '4.80V', '4.82V', '4.84V', '4.86V', '4.88V', '4.90V', '4.92V', '4.94V', '4.96V', '4.98V'



;voltable0:
;DB '0.00V', '0.01V', '0.02V', '0.04V', '0.05V', '0.06V', '0.07V', '0.08V', '0.09V', '0.11V', '0.12V', '0.13V', '0.14V', '0.15V', '0.16V', '0.18V', '0.19V', '0.20V', '0.21V', '0.22V', '0.23V', '0.25V', '0.26V', '0.27V', '0.28V', '0.29V', '0.30V', '0.32V', '0.33V', '0.34V', '0.35V', '0.36V'
;
;voltable1:
;DB '0.38V', '0.39V', '0.40V', '0.41V', '0.42V', '0.43V', '0.45V', '0.46V', '0.47V', '0.48V', '0.49V', '0.50V', '0.52V', '0.53V', '0.54V', '0.55V', '0.56V', '0.57V', '0.59V', '0.60V', '0.61V', '0.62V', '0.63V', '0.64V', '0.66V', '0.67V', '0.68V', '0.69V', '0.70V', '0.71V', '0.73V', '0.74V'
;
;voltable2:
;DB '0.75V', '0.76V', '0.77V', '0.79V', '0.80V', '0.81V', '0.82V', '0.83V', '0.84V', '0.86V', '0.87V', '0.88V', '0.89V', '0.90V', '0.91V', '0.93V', '0.94V', '0.95V', '0.96V', '0.97V', '0.98V', '1.00V', '1.01V', '1.02V', '1.03V', '1.04V', '1.05V', '1.07V', '1.08V', '1.09V', '1.10V', '1.11V'
;
;voltable3:
;DB '1.12V', '1.14V', '1.15V', '1.16V', '1.17V', '1.18V', '1.20V', '1.21V', '1.22V', '1.23V', '1.24V', '1.25V', '1.27V', '1.28V', '1.29V', '1.30V', '1.31V', '1.32V', '1.34V', '1.35V', '1.36V', '1.37V', '1.38V', '1.39V', '1.41V', '1.42V', '1.43V', '1.44V', '1.45V', '1.46V', '1.48V', '1.49V'
;
;voltable4:
;DB '1.50V', '1.51V', '1.52V', '1.54V', '1.55V', '1.56V', '1.57V', '1.58V', '1.59V', '1.61V', '1.62V', '1.63V', '1.64V', '1.65V', '1.66V', '1.68V', '1.69V', '1.70V', '1.71V', '1.72V', '1.73V', '1.75V', '1.76V', '1.77V', '1.78V', '1.79V', '1.80V', '1.82V', '1.83V', '1.84V', '1.85V', '1.86V'
;
;voltable5:
;DB '1.88V', '1.89V', '1.90V', '1.91V', '1.92V', '1.93V', '1.95V', '1.96V', '1.97V', '1.98V', '1.99V', '2.00V', '2.02V', '2.03V', '2.04V', '2.05V', '2.06V', '2.07V', '2.09V', '2.10V', '2.11V', '2.12V', '2.13V', '2.14V', '2.16V', '2.17V', '2.18V', '2.19V', '2.20V', '2.21V', '2.23V', '2.24V'
;
;voltable6:
;DB '2.25V', '2.26V', '2.27V', '2.29V', '2.30V', '2.31V', '2.32V', '2.33V', '2.34V', '2.36V', '2.37V', '2.38V', '2.39V', '2.40V', '2.41V', '2.43V', '2.44V', '2.45V', '2.46V', '2.47V', '2.48V', '2.50V', '2.51V', '2.52V', '2.53V', '2.54V', '2.55V', '2.57V', '2.58V', '2.59V', '2.60V', '2.61V'
;
;voltable7:
;DB '2.62V', '2.64V', '2.65V', '2.66V', '2.67V', '2.68V', '2.70V', '2.71V', '2.72V', '2.73V', '2.74V', '2.75V', '2.77V', '2.78V', '2.79V', '2.80V', '2.81V', '2.82V', '2.84V', '2.85V', '2.86V', '2.87V', '2.88V', '2.89V', '2.91V', '2.92V', '2.93V', '2.94V', '2.95V', '2.96V', '2.98V', '2.99V'


CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret



SEND_COMMAND:
	mov p0,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:
	mov p0,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret

DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


END